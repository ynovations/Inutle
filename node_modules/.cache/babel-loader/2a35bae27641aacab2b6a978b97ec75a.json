{"ast":null,"code":"var _jsxFileName = \"D:\\\\YNOVATIONS\\\\Projects\\\\Wordle Clone\\\\INUTLE\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { InformationCircleIcon, ChartBarIcon, SunIcon } from '@heroicons/react/outline';\nimport { useState, useEffect } from 'react';\nimport { Alert } from './components/alerts/Alert';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { AboutModal } from './components/modals/AboutModal';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { GAME_TITLE, WIN_MESSAGES, GAME_COPIED_MESSAGE, ABOUT_GAME_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, WORD_NOT_FOUND_MESSAGE, CORRECT_WORD_MESSAGE } from './constants/strings';\nimport { isWordInWordList, isWinningWord, solution } from './lib/words';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, saveGameStateToLocalStorage } from './lib/localStorage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALERT_TIME_MS = 2000;\n\nfunction App() {\n  _s();\n\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false);\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false);\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [successAlert, setSuccessAlert] = useState('');\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.solution) !== solution) {\n      return [];\n    }\n\n    const gameWasWon = loaded.guesses.includes(solution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === 6 && !gameWasWon) {\n      setIsGameLost(true);\n    }\n\n    return loaded.guesses;\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      setSuccessAlert(WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]);\n      setTimeout(() => {\n        setSuccessAlert('');\n        setIsStatsModalOpen(true);\n      }, ALERT_TIME_MS);\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, ALERT_TIME_MS);\n    }\n  }, [isGameWon, isGameLost]);\n\n  const onChar = value => {\n    if (currentGuess.length < 5 && guesses.length < 6 && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1));\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(currentGuess.length === 5)) {\n      setIsNotEnoughLetters(true);\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false);\n      }, ALERT_TIME_MS);\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true);\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false);\n      }, ALERT_TIME_MS);\n    }\n\n    const winningWord = isWinningWord(currentGuess);\n\n    if (currentGuess.length === 5 && guesses.length < 6 && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === 5) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-80 mx-auto items-center mb-8 mt-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl grow font-bold dark:text-white\",\n        children: GAME_TITLE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SunIcon, {\n        className: \"h-6 w-6 cursor-pointer dark:stroke-white\",\n        onClick: () => handleDarkMode(!isDarkMode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InformationCircleIcon, {\n        className: \"h-6 w-6 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsInfoModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartBarIcon, {\n        className: \"h-6 w-6 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsStatsModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      guesses: guesses,\n      currentGuess: currentGuess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onChar: onChar,\n      onDelete: onDelete,\n      onEnter: onEnter,\n      guesses: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n      isOpen: isInfoModalOpen,\n      handleClose: () => setIsInfoModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n      isOpen: isStatsModalOpen,\n      handleClose: () => setIsStatsModalOpen(false),\n      guesses: guesses,\n      gameStats: stats,\n      isGameLost: isGameLost,\n      isGameWon: isGameWon,\n      handleShare: () => {\n        setSuccessAlert(GAME_COPIED_MESSAGE);\n        return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AboutModal, {\n      isOpen: isAboutModalOpen,\n      handleClose: () => setIsAboutModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\",\n      onClick: () => setIsAboutModalOpen(true),\n      children: ABOUT_GAME_MESSAGE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: NOT_ENOUGH_LETTERS_MESSAGE,\n      isOpen: isNotEnoughLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: WORD_NOT_FOUND_MESSAGE,\n      isOpen: isWordNotFoundAlertOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: CORRECT_WORD_MESSAGE(solution),\n      isOpen: isGameLost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: successAlert,\n      isOpen: successAlert !== '',\n      variant: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cjun1nH1OR3HiUAoYqgUSpFoQxU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/YNOVATIONS/Projects/Wordle Clone/INUTLE/src/App.tsx"],"names":["InformationCircleIcon","ChartBarIcon","SunIcon","useState","useEffect","Alert","Grid","Keyboard","AboutModal","InfoModal","StatsModal","GAME_TITLE","WIN_MESSAGES","GAME_COPIED_MESSAGE","ABOUT_GAME_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WORD_NOT_FOUND_MESSAGE","CORRECT_WORD_MESSAGE","isWordInWordList","isWinningWord","solution","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","ALERT_TIME_MS","App","prefersDarkMode","window","matchMedia","matches","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isAboutModalOpen","setIsAboutModalOpen","isNotEnoughLetters","setIsNotEnoughLetters","isStatsModalOpen","setIsStatsModalOpen","isWordNotFoundAlertOpen","setIsWordNotFoundAlertOpen","isGameLost","setIsGameLost","isDarkMode","setIsDarkMode","localStorage","getItem","successAlert","setSuccessAlert","guesses","setGuesses","loaded","gameWasWon","includes","length","stats","setStats","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","Math","floor","random","setTimeout","onChar","value","onDelete","slice","onEnter","winningWord"],"mappings":"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","sourcesContent":["import {\n  InformationCircleIcon,\n  ChartBarIcon,\n  SunIcon,\n} from '@heroicons/react/outline'\nimport { useState, useEffect } from 'react'\nimport { Alert } from './components/alerts/Alert'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { AboutModal } from './components/modals/AboutModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport {\n  GAME_TITLE,\n  WIN_MESSAGES,\n  GAME_COPIED_MESSAGE,\n  ABOUT_GAME_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  WORD_NOT_FOUND_MESSAGE,\n  CORRECT_WORD_MESSAGE,\n} from './constants/strings'\nimport { isWordInWordList, isWinningWord, solution } from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n} from './lib/localStorage'\n\nimport './App.css'\n\nconst ALERT_TIME_MS = 2000\n\nfunction App() {\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false)\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false)\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [successAlert, setSuccessAlert] = useState('')\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses.includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === 6 && !gameWasWon) {\n      setIsGameLost(true)\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  }, [isDarkMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      setSuccessAlert(\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      )\n      setTimeout(() => {\n        setSuccessAlert('')\n        setIsStatsModalOpen(true)\n      }, ALERT_TIME_MS)\n    }\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, ALERT_TIME_MS)\n    }\n  }, [isGameWon, isGameLost])\n\n  const onChar = (value: string) => {\n    if (currentGuess.length < 5 && guesses.length < 6 && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1))\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n    if (!(currentGuess.length === 5)) {\n      setIsNotEnoughLetters(true)\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false)\n      }, ALERT_TIME_MS)\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true)\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false)\n      }, ALERT_TIME_MS)\n    }\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (currentGuess.length === 5 && guesses.length < 6 && !isGameWon) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === 5) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n      }\n    }\n  }\n\n  return (\n    <div className=\"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n      <div className=\"flex w-80 mx-auto items-center mb-8 mt-12\">\n        <h1 className=\"text-xl grow font-bold dark:text-white\">{GAME_TITLE}</h1>\n        <SunIcon\n          className=\"h-6 w-6 cursor-pointer dark:stroke-white\"\n          onClick={() => handleDarkMode(!isDarkMode)}\n        />\n        <InformationCircleIcon\n          className=\"h-6 w-6 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n        <ChartBarIcon\n          className=\"h-6 w-6 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsStatsModalOpen(true)}\n        />\n      </div>\n      <Grid guesses={guesses} currentGuess={currentGuess} />\n      <Keyboard\n        onChar={onChar}\n        onDelete={onDelete}\n        onEnter={onEnter}\n        guesses={guesses}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        guesses={guesses}\n        gameStats={stats}\n        isGameLost={isGameLost}\n        isGameWon={isGameWon}\n        handleShare={() => {\n          setSuccessAlert(GAME_COPIED_MESSAGE)\n          return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS)\n        }}\n      />\n      <AboutModal\n        isOpen={isAboutModalOpen}\n        handleClose={() => setIsAboutModalOpen(false)}\n      />\n\n      <button\n        type=\"button\"\n        className=\"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\"\n        onClick={() => setIsAboutModalOpen(true)}\n      >\n        {ABOUT_GAME_MESSAGE}\n      </button>\n\n      <Alert message={NOT_ENOUGH_LETTERS_MESSAGE} isOpen={isNotEnoughLetters} />\n      <Alert\n        message={WORD_NOT_FOUND_MESSAGE}\n        isOpen={isWordNotFoundAlertOpen}\n      />\n      <Alert message={CORRECT_WORD_MESSAGE(solution)} isOpen={isGameLost} />\n      <Alert\n        message={successAlert}\n        isOpen={successAlert !== ''}\n        variant=\"success\"\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}